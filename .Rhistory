x = runif(100, -2, 2)
y = runif(1, 0, 10) + cbind(x, x^2, x^3, x^4, x^5) %*% betas
plot(x, y)
return (list(x, y))
}
str_replace_all("hello my name is", fixed(" "), "")
stringr::str_replace_all("hello my name is", fixed(" "), "")
stringr::str_replace_all("hello my name is", " ", "")
betas = runif(2, -4, 4)
x = runif(100, -10, 10)
y = cbind(1, x) %*% betas
plot(x, y)
betas = runif(2, -4, 4)
x = runif(100, -10, 10)
y = cbind(1, x) %*% betas
plot(x, y)
betas = runif(2, -4, 4)
x = runif(100, -10, 10)
y = cbind(1, x) %*% betas
plot(x, y)
betas = runif(2, -4, 4)
x = runif(100, -10, 10)
y = cbind(1, x) %*% betas
plot(x, y)
betas = runif(2, -4, 4)
x = runif(100, -10, 10)
y = cbind(1, x) %*% betas
plot(x, y)
betas = runif(2, -4, 4)
x = runif(100, -10, 10)
y = cbind(1, x) %*% betas
plot(x, y)
betas = runif(2, -4, 4)
x = runif(100, -10, 10)
x = seq(from = min(x), to = max(x), length.out = 100)
y = cbind(1, x) %*% betas
plot(x, y)
betas = runif(2, -4, 4)
x = runif(100, -10, 10)
x = seq(from = min(x), to = max(x), length.out = 100)
y = cbind(1, x) %*% betas
plot(x, y)
betas = runif(2, -4, 4)
x = runif(100, -10, 10)
x = seq(from = min(x), to = max(x), length.out = 100)
y = cbind(1, x) %*% betas
plot(x, y)
betas = runif(5, -2, 2)
x = runif(100, -2, 2)
x = seq(from = min(x), to = max(x), length.out = 100)
y = runif(1, 0, 10) + cbind(x, x^2, x^3, x^4, x^5) %*% betas
plot(x, y)
betas = runif(5, -2, 2)
x = runif(100, -2, 2)
x = seq(from = min(x), to = max(x), length.out = 100)
y = runif(1, 0, 10) + cbind(x, x^2, x^3, x^4, x^5) %*% betas
plot(x, y)
betas = runif(5, -2, 2)
x = runif(100, -2, 2)
x = seq(from = min(x), to = max(x), length.out = 100)
y = runif(1, 0, 10) + cbind(x, x^2, x^3, x^4, x^5) %*% betas
plot(x, y)
betas = runif(5, -2, 2)
x = runif(100, -2, 2)
x = seq(from = min(x), to = max(x), length.out = 100)
y = runif(1, 0, 10) + cbind(x, x^2, x^3, x^4, x^5) %*% betas
plot(x, y)
betas = runif(5, -2, 2)
x = runif(100, -2, 2)
x = seq(from = min(x), to = max(x), length.out = 100)
y = runif(1, 0, 10) + cbind(x, x^2, x^3, x^4, x^5) %*% betas
plot(x, y)
betas = runif(3, -4, 4)
x = runif(100, -10, 10)
x = seq(from = min(x), to = max(x), length.out = 100)
y = cbind(1, x, x^2) %*% betas
plot(x, y)
betas = runif(3, -4, 4)
x = runif(100, -10, 10)
x = seq(from = min(x), to = max(x), length.out = 100)
y = cbind(1, x, x^2) %*% betas
plot(x, y)
betas = runif(3, -4, 4)
x = runif(100, -10, 10)
x = seq(from = min(x), to = max(x), length.out = 100)
y = cbind(1, x, x^2) %*% betas
plot(x, y)
betas = runif(3, -4, 4)
x = runif(100, -10, 10)
x = seq(from = min(x), to = max(x), length.out = 100)
y = cbind(1, x, x^2) %*% betas
plot(x, y)
betas = runif(3, -4, 4)
x = runif(100, -10, 10)
x = seq(from = min(x), to = max(x), length.out = 100)
y = cbind(1, x, x^2) %*% betas
plot(x, y)
betas = runif(3, -4, 4)
x = runif(100, -10, 10)
x = seq(from = min(x), to = max(x), length.out = 100)
y = cbind(1, x, x^2) %*% betas
plot(x, y)
dir = "plot_data/effects"
simLinear = function () {
betas = runif(2, -4, 4)
x = runif(100, -10, 10)
x = seq(from = min(x), to = max(x), length.out = 100)
y = cbind(1, x) %*% betas
plot(x, y)
return (list(x, y))
}
simPoly = function () {
betas = runif(3, -4, 4)
x = runif(100, -10, 10)
x = seq(from = min(x), to = max(x), length.out = 100)
y = cbind(1, x, x^2) %*% betas
plot(x, y)
return (list(x, y))
}
simSplines = function () {
betas = runif(5, -2, 2)
x = runif(100, -2, 2)
x = seq(from = min(x), to = max(x), length.out = 100)
y = runif(1, 0, 10) + cbind(x, x^2, x^3, x^4, x^5) %*% betas
plot(x, y)
return (list(x, y))
}
for (i in bl.names) {
file.name = stringr::str_replace_all(string = i, pattern = " ", replacement = "")
if (grepl("Linear", i)) { df.temp = simLinear() }
if (grepl("Spline with degree 3", i)) { df.temp = simSplines() }
if (grepl("Polynomial", i)) { df.temp = simPoly() }
df.temp = data.frame(x = df.temp[["x"]], y = df.temp[["y"]])
write.csv(df.temp, file = paste0(dir, "/", file.name, ".csv"))
}
set.seed(123)
# Simulate effects:
# --------------------------------
bl.type = sample(c("Linear", "Spline with degree 3", "Polynomial"))
bl.names = c("GenderMale", "Income", "Height", "Longitude", "Latitude", "RiskGroup",
"GenderFemale", "Age", "Duration", "Wealth", "Depth", "Pressure", "Temperature",
"City", "Country", "Experience", "Education", "Travel")
bl.names = paste0(sample(bl.type, length(bl.names), TRUE), " ",bl.names)
bl = sample(bl.names, 1500, TRUE)
# Write .js file to load the base-learner:
mylines = c(
"function getBlearner ()",
"{",
paste0("  return [", paste( paste0("\"", bl, "\""), collapse = ", "), "];"),
"}"
)
writeLines(mylines, con = "js/blearner.js")
# Simulate data depending on learner:
# -------------------------------------------
dir = "plot_data/effects"
simLinear = function () {
betas = runif(2, -4, 4)
x = runif(100, -10, 10)
x = seq(from = min(x), to = max(x), length.out = 100)
y = cbind(1, x) %*% betas
plot(x, y)
return (list(x, y))
}
simPoly = function () {
betas = runif(3, -4, 4)
x = runif(100, -10, 10)
x = seq(from = min(x), to = max(x), length.out = 100)
y = cbind(1, x, x^2) %*% betas
plot(x, y)
return (list(x, y))
}
simSplines = function () {
betas = runif(5, -2, 2)
x = runif(100, -2, 2)
x = seq(from = min(x), to = max(x), length.out = 100)
y = runif(1, 0, 10) + cbind(x, x^2, x^3, x^4, x^5) %*% betas
plot(x, y)
return (list(x, y))
}
for (i in bl) {
file.name = stringr::str_replace_all(string = i, pattern = " ", replacement = "")
if (grepl("Linear", i)) { df.temp = simLinear() }
if (grepl("Spline with degree 3", i)) { df.temp = simSplines() }
if (grepl("Polynomial", i)) { df.temp = simPoly() }
df.temp = data.frame(x = df.temp[["x"]], y = df.temp[["y"]])
write.csv(df.temp, file = paste0(dir, "/", file.name, ".csv"))
}
bl
i = bl[1000]
file.name = stringr::str_replace_all(string = i, pattern = " ", replacement = "")
if (grepl("Linear", i)) { df.temp = simLinear() }
if (grepl("Spline with degree 3", i)) { df.temp = simSplines() }
if (grepl("Polynomial", i)) { df.temp = simPoly() }
df.temp = data.frame(x = df.temp[["x"]], y = df.temp[["y"]])
df.tmep
df.temp
if (grepl("Linear", i)) { df.temp = simLinear() }
if (grepl("Spline with degree 3", i)) { df.temp = simSplines() }
if (grepl("Polynomial", i)) { df.temp = simPoly() }
df.temp
set.seed(123)
# Simulate effects:
# --------------------------------
bl.type = sample(c("Linear", "Spline with degree 3", "Polynomial"))
bl.names = c("GenderMale", "Income", "Height", "Longitude", "Latitude", "RiskGroup",
"GenderFemale", "Age", "Duration", "Wealth", "Depth", "Pressure", "Temperature",
"City", "Country", "Experience", "Education", "Travel")
bl.names = paste0(sample(bl.type, length(bl.names), TRUE), " ",bl.names)
bl = sample(bl.names, 1500, TRUE)
# Write .js file to load the base-learner:
mylines = c(
"function getBlearner ()",
"{",
paste0("  return [", paste( paste0("\"", bl, "\""), collapse = ", "), "];"),
"}"
)
writeLines(mylines, con = "js/blearner.js")
# Simulate data depending on learner:
# -------------------------------------------
dir = "plot_data/effects"
simLinear = function () {
betas = runif(2, -4, 4)
x = runif(100, -10, 10)
x = seq(from = min(x), to = max(x), length.out = 100)
y = cbind(1, x) %*% betas
# plot(x, y)
return (list(x, y))
}
simPoly = function () {
betas = runif(3, -4, 4)
x = runif(100, -10, 10)
x = seq(from = min(x), to = max(x), length.out = 100)
y = cbind(1, x, x^2) %*% betas
# plot(x, y)
return (list(x, y))
}
simSplines = function () {
betas = runif(5, -2, 2)
x = runif(100, -2, 2)
x = seq(from = min(x), to = max(x), length.out = 100)
y = runif(1, 0, 10) + cbind(x, x^2, x^3, x^4, x^5) %*% betas
# plot(x, y)
return (list(x, y))
}
for (i in unique(bl)) {
file.name = stringr::str_replace_all(string = i, pattern = " ", replacement = "")
if (grepl("Linear", i)) { df.temp = simLinear() }
if (grepl("Spline with degree 3", i)) { df.temp = simSplines() }
if (grepl("Polynomial", i)) { df.temp = simPoly() }
df.temp = data.frame(x = df.temp[[1]], y = df.temp[[2]])
write.csv(df.temp, file = paste0(dir, "/", file.name, ".csv"), row.names = FALSE)
}
100 * 0.05
generateCboostAppData = function (cboost)
{
pb <- txtProgressBar()
for (i in seq_len(100)) {
Sys.sleep(0.02)
setTxtProgressBar(pb, i)
}
}
generateCboostAppData(1)
generateCboostAppData = function (cboost)
{
pb <- txtProgressBar()
for (i in seq_len(100)) {
Sys.sleep(0.2)
setTxtProgressBar(pb, i, style=3)
}
}
generateCboostAppData = function (cboost)
{
pb <- txtProgressBar()
for (i in seq_len(100)) {
Sys.sleep(0.2)
setTxtProgressBar(pb, i, style=3)
}
}
generateCboostAppData(1)
generateCboostAppData = function (cboost)
{
pb <- txtProgressBar(style = 3)
for (i in seq_len(100)) {
Sys.sleep(0.2)
setTxtProgressBar(pb, i)
}
close(pb)
}
generateCboostAppData(1)
generateCboostAppData = function (cboost)
{
pb <- txtProgressBar(min = 1, max = 100, style = 3)
for (i in seq_len(100)) {
Sys.sleep(0.1)
setTxtProgressBar(pb, i)
}
close(pb)
}
generateCboostAppData(1)
generateCboostAppData = function (cboost)
{
pb <- txtProgressBar(min = 1, max = 100, style = 3)
for (i in seq_len(100)) {
Sys.sleep(0.05)
setTxtProgressBar(pb, i)
}
close(pb)
}
generateCboostAppData(1)
generateCboostAppData = function (cboost)
{
pb <- txtProgressBar(min = 1, max = 100, style = 3)
for (i in seq_len(100)) {
Sys.sleep(0.02)
setTxtProgressBar(pb, i)
}
close(pb)
}
generateCboostAppData(1)
message("bla", "bli")
getwd()
utils::browseURL("index.html")
utils::browseURL("index.html")
utils::browseURL("index.html")
utils::browseURL("index.html")
library(ggplot2)
plot.compboost = function (object, learner, at)
{
plot.data = read.csv(
file = paste0(
"plot_data/effects/",
stringr::str_replace_all(string = learner, pattern = " ", replacement = ""))
)
ggplot(data = plot.data, aes(x, y)) + geom_line() + theme_dark()
}
compboost = function ()
{
Sys.sleep(3)
out = list("compboost")
class(out) = "compboost"
return (out)
}
cboost = compboost(y ~ ., data = df)
compboost = function (...)
{
Sys.sleep(1)
out = list("compboost")
class(out) = "compboost"
return (out)
}
generateCboostAppData = function (cboost)
{
message("Generating app data into: ./compboost_js\n")
pb <- txtProgressBar(min = 1, max = 100, style = 3)
for (i in seq_len(100)) {
Sys.sleep(0.02)
setTxtProgressBar(pb, i)
}
close(pb)
utils::browseURL("index.html")
}
plot.compboost = function (object, learner, at)
{
plot.data = read.csv(
file = paste0(
"plot_data/effects/",
stringr::str_replace_all(string = learner, pattern = " ", replacement = ""))
)
ggplot(data = plot.data, aes(x, y)) + geom_line() + theme_dark()
}
cboost = compboost(y ~ ., data = df)
plot(cboost, learner = "Linear City", at = 1500)
compboost = function (...)
{
Sys.sleep(1)
out = list("compboost")
class(out) = "compboost"
return (out)
}
generateCboostAppData = function (cboost)
{
message("Generating app data into: ./compboost_js\n")
pb <- txtProgressBar(min = 1, max = 100, style = 3)
for (i in seq_len(100)) {
Sys.sleep(0.02)
setTxtProgressBar(pb, i)
}
close(pb)
utils::browseURL("index.html")
}
plot.compboost = function (object, learner, at)
{
plot.data = read.csv(
file = paste0(
"plot_data/effects/",
stringr::str_replace_all(string = learner, pattern = " ", replacement = "")
".csv"
)
)
ggplot(data = plot.data, aes(x, y)) + geom_line() + theme_dark()
}
compboost = function (...)
{
Sys.sleep(1)
out = list("compboost")
class(out) = "compboost"
return (out)
}
generateCboostAppData = function (cboost)
{
message("Generating app data into: ./compboost_js\n")
pb <- txtProgressBar(min = 1, max = 100, style = 3)
for (i in seq_len(100)) {
Sys.sleep(0.02)
setTxtProgressBar(pb, i)
}
close(pb)
utils::browseURL("index.html")
}
plot.compboost = function (object, learner, at)
{
plot.data = read.csv(
file = paste0(
"plot_data/effects/",
stringr::str_replace_all(string = learner, pattern = " ", replacement = ""),
".csv"
)
)
ggplot(data = plot.data, aes(x, y)) + geom_line() + theme_dark()
}
cboost = compboost(y ~ ., data = df)
plot(cboost, learner = "Linear City", at = 1500)
strsplit("bla bla", "")
strsplit("bla bla", " ")
compboost = function (...)
{
Sys.sleep(1)
out = list("compboost")
class(out) = "compboost"
return (out)
}
generateCboostAppData = function (cboost)
{
message("Generating app data into: ./compboost_js\n")
pb <- txtProgressBar(min = 1, max = 100, style = 3)
for (i in seq_len(100)) {
Sys.sleep(0.02)
setTxtProgressBar(pb, i)
}
close(pb)
utils::browseURL("index.html")
}
plot.compboost = function (object, learner, at)
{
plot.data = read.csv(
file = paste0(
"plot_data/effects/",
stringr::str_replace_all(string = learner, pattern = " ", replacement = ""),
".csv"
)
)
var = strsplit(learner, " ")[[1]]
var = var[length(var)]
ggplot(data = plot.data, aes(x, y)) +
geom_line() +
theme_bw() +
labs(title = learner,
subtitle = paste0("Plottet at iteration ", at)) +
xlab(var) +
ylab("")
}
compboost = function (...)
{
Sys.sleep(1)
out = list("compboost")
class(out) = "compboost"
return (out)
}
generateCboostAppData = function (cboost, dir)
{
message("Generating app data into: ", dir, "\n")
pb <- txtProgressBar(min = 1, max = 100, style = 3)
for (i in seq_len(100)) {
Sys.sleep(0.02)
setTxtProgressBar(pb, i)
}
close(pb)
utils::browseURL("index.html")
}
plot.compboost = function (object, learner, at)
{
plot.data = read.csv(
file = paste0(
"plot_data/effects/",
stringr::str_replace_all(string = learner, pattern = " ", replacement = ""),
".csv"
)
)
var = strsplit(learner, " ")[[1]]
var = var[length(var)]
ggplot(data = plot.data, aes(x, y)) +
geom_line() +
theme_bw() +
labs(title = learner,
subtitle = paste0("Plottet at iteration ", at)) +
xlab(var) +
ylab("")
}
cboost = compboost(y ~ ., data = df)
generateCboostAppData(cboost, dir = "mycboost_plotting_data")
plot(cboost, learner = "Polynomial Travel", at = 1000)
gg + theme_classic()
